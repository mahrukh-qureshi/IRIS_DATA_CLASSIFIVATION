# -*- coding: utf-8 -*-
"""IrisFlowerClassification_mahrukh.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16S9Z-ZZWzhPr2QlueciEG-BjWaz302g5
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("saurabh00007/iriscsv")

print("Path to dataset files:", path)

import kagglehub  # For downloading datasets
import pandas as pd  # For data manipulation
import matplotlib.pyplot as plt  # For visualization

# Download latest version of the dataset
path = kagglehub.dataset_download("saurabh00007/iriscsv")
print("Path to dataset files:", path)

"""#load the data"""

# Load the data
import pandas as pd # Importing pandas within the code cell

data_path = f"{path}/Iris.csv"  # Adjust path as needed
data = pd.read_csv(data_path)
print("First 5 rows of the dataset:\n", data.head())

"""DATA cleaning"""

print("\nData Info:")
print(data.info())

print("\nChecking for missing values:\n", data.isnull().sum())

"""Data analysis"""

# Add this line to the beginning of the current code cell:
import matplotlib.pyplot as plt

# Assuming your DataFrame has columns named 'SepalLengthCm' and 'SepalWidthCm'
# Replace with actual column names if different
plt.figure(figsize=(10, 6))
plt.plot(data['SepalLengthCm'], data['SepalWidthCm'], marker='o', label='Sepal Length vs Width')
plt.title('Sepal Length vs Width')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.grid(True)
plt.legend()
plt.show()

"""Data preperation of model"""

# Instead of trying to work with a 'Date' column that doesn't exist,
# let's focus on analyzing existing data, such as 'SepalLengthCm', 'SepalWidthCm', etc.
# If you want to add a timestamp for when the data was collected, you can add a new column:

import pandas as pd

# ... (your previous code to load the Iris dataset into the 'data' DataFrame) ...

# Adding a new column 'Date' with the current timestamp
data['Date'] = pd.to_datetime('now')

# Now you can sort by 'Date' if needed:
data = data.sort_values(by='Date')

# Or set it as index (if it makes sense for your analysis):
# data.set_index('Date', inplace=True)

print("Data after adding 'Date' column:\n", data.head())

"""splitng the model"""

# Split data into training and testing sets
train_size = int(len(data) * 0.8)  # 80% training, 20% testing
train = data[:train_size]
test = data[train_size:]

print(f"Training data shape: {train.shape}")
print(f"Testing data shape: {test.shape}")

"""model building"""

from statsmodels.tsa.arima.model import ARIMA

# Train ARIMA Model using 'SepalLengthCm' column
model = ARIMA(train['SepalLengthCm'], order=(5, 1, 0))  # ARIMA(p,d,q)
model_fit = model.fit()

print("Model Summary:\n", model_fit.summary())

"""pridiction and visualization"""

# Forecasting
test['Predicted'] = model_fit.forecast(steps=len(test))

# Plotting Actual vs Predicted Values
plt.figure(figsize=(12, 6))
# Replace 'Unemployment_Rate' with the column you used for training the ARIMA model (e.g., 'SepalLengthCm')
plt.plot(train['SepalLengthCm'], label='Training Data')
plt.plot(test['SepalLengthCm'], label='Actual Test Data')
plt.plot(test['Predicted'], label='Predicted Data', linestyle='--')
plt.title('Sepal Length Prediction')  # Update the title accordingly
plt.xlabel('Date')
plt.ylabel('Sepal Length (cm)')  # Update the y-axis label
plt.legend()
plt.grid(True)
plt.show()